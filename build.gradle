import java.nio.file.Files
import java.nio.file.Path

plugins {
    alias libs.plugins.architectury.plugin
    alias libs.plugins.architectury.loom apply false
    alias libs.plugins.shadow apply false
    alias libs.plugins.forgix
}



Path mavenDir = Path.of(System.getProperty("user.home")).resolve(".m2").resolve("repository").resolve(libs.versions.maven.group.get().replace(".", "/")).resolve("UniversalExporter-adaptor").resolve("0.1.0")

architectury {
    minecraft = libs.versions.minecraft.get()
}

final def architecturyLoom = libs.plugins.architectury.loom.get().pluginId
final def architecturyPlugin = libs.plugins.architectury.plugin.get().pluginId
final def shadow = libs.plugins.shadow.get().pluginId
def maven_group = libs.versions.maven.group.get()
def archives_base_name = libs.versions.archives.base.name.get()
def mod_version = "${libs.versions.mod.version.get()}+mc${libs.versions.minecraft.get()}"


subprojects {
    apply {
        plugin(architecturyLoom)
        plugin(shadow)
        plugin("maven-publish")
    }

    loom {
        accessWidenerPath = project(":common").file("src/main/resources/uni_exporter.accesswidener")
    }

    dependencies {
        minecraft libs.minecraft.get()
        mappings variantOf(libs.yarn.mappings) { classifier "v2" }
    }
    publishing {
        publications {
            create(project.name + "Maven", MavenPublication) {
                artifactId = archives_base_name

                from(components.java as SoftwareComponent)
            }
        }


        // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
        repositories {
            // Add repositories to publish to here.
        }
    }
}

allprojects {
    apply {
        plugin("java")
        plugin(architecturyPlugin)
        plugin("maven-publish")
    }

    archivesBaseName = archives_base_name
    version = mod_version

    group = maven_group

    repositories {
        mavenLocal()
        maven {
            url rootProject.file("./maven-repo/")
        }
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        withSourcesJar()
    }
}

if (Files.exists(mavenDir)) {
    project(":common") {
        dependencies {
            implementation(libs.adapter)
        }
    }
    project(":fabric") {
        dependencies {
            implementation(libs.adapter)
            include(libs.adapter)

        }
    }

    project(":forge") {
        dependencies {
            minecraftClientLibraries(libs.adapter)
            include(libs.adapter)
        }
    }
}

forgix {
    group = maven_group
    mergedJarName = "${archives_base_name}-${rootProject.version}.jar"
    outputDir = "build/libs/forgix"


    forge(({
        jarLocation = "build/libs/${archives_base_name}-${mod_version}.jar"
    } as Closure<io.github.pacifistmc.forgix.plugin.ForgixMergeExtension.ForgeContainer>))


    fabric(({
        jarLocation = "build/libs/${archives_base_name}-${mod_version}.jar"
    } as Closure<io.github.pacifistmc.forgix.plugin.ForgixMergeExtension.FabricContainer>))
}

tasks.build {
    dependsOn(project(":fabric").tasks.build)
    dependsOn(project(":forge").tasks.build)
    dependsOn(tasks.mergeJars)
}





